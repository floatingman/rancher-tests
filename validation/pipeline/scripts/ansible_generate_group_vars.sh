#!/bin/bash
set -e

# Script to generate group_vars/all.yml from ANSIBLE_VARIABLES
# This script creates a standardized group_vars file that can be used by all Ansible playbooks

echo "=== Generating Ansible group_vars/all.yml ==="

# Validate required inputs
if [[ -z "${ANSIBLE_VARIABLES}" ]]; then
    echo "ERROR: ANSIBLE_VARIABLES environment variable is not set"
    exit 1
fi

# Create output directory
OUTPUT_DIR="${1:-/root/group_vars}"
mkdir -p "${OUTPUT_DIR}"

OUTPUT_FILE="${OUTPUT_DIR}/all.yml"

# Create a template with placeholders for common variables
cat > "${OUTPUT_FILE}" << 'EOF'
---
# Ansible group variables for Rancher/RKE2 deployment
# This file is auto-generated by ansible_generate_group_vars.sh

# Basic cluster configuration
cluster_name: ${CLUSTER_NAME:-rancher-test}
namespace: ${NAMESPACE:-default}

# RKE2 Configuration
rke2_version: "${RKE2_VERSION}"

# Rancher Configuration
rancher_version: "${RANCHER_VERSION}"
rancher_hostname: "${RANCHER_HOSTNAME}"

# Private Registry Configuration (if enabled)
private_registry_url: "${PRIVATE_REGISTRY_URL}"
private_registry_username: "${PRIVATE_REGISTRY_USERNAME}"
private_registry_password: "${PRIVATE_REGISTRY_PASSWORD}"
enable_private_registry: ${ENABLE_PRIVATE_REGISTRY:-false}

# SSH Configuration
ssh_user: ${SSH_USER:-ubuntu}
ssh_port: ${SSH_PORT:-22}

# Network Configuration
pod_cidr: ${POD_CIDR:-10.42.0.0/16}
service_cidr: ${SERVICE_CIDR:-10.43.0.0/16}

# Additional configuration
# Add any additional variables from ANSIBLE_VARIABLES below
EOF

# Add the ANSIBLE_VARIABLES content at the end of the file
echo "" >> "${OUTPUT_FILE}"
echo "# Variables from ANSIBLE_VARIABLES parameter" >> "${OUTPUT_FILE}"

# Process ANSIBLE_VARIABLES to replace placeholders with actual environment variable values
# First, replace common placeholders in the ANSIBLE_VARIABLES content
PROCESSED_ANSIBLE_VARIABLES="${ANSIBLE_VARIABLES}"

# Replace placeholders with actual environment variable values using safe substitution
if [[ -n "${RKE2_VERSION}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="${PROCESSED_ANSIBLE_VARIABLES//\${RKE2_VERSION}/${RKE2_VERSION}}"
fi

if [[ -n "${RANCHER_VERSION}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="${PROCESSED_ANSIBLE_VARIABLES//\${RANCHER_VERSION}/${RANCHER_VERSION}}"
fi

if [[ -n "${HOSTNAME_PREFIX}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="${PROCESSED_ANSIBLE_VARIABLES//\${HOSTNAME_PREFIX}/${HOSTNAME_PREFIX}}"
fi

if [[ -n "${PRIVATE_REGISTRY_URL}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="${PROCESSED_ANSIBLE_VARIABLES//\${PRIVATE_REGISTRY_URL}/${PRIVATE_REGISTRY_URL}}"
fi

if [[ -n "${PRIVATE_REGISTRY_USERNAME}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="${PROCESSED_ANSIBLE_VARIABLES//\${PRIVATE_REGISTRY_USERNAME}/${PRIVATE_REGISTRY_USERNAME}}"
fi

if [[ -n "${PRIVATE_REGISTRY_PASSWORD}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="${PROCESSED_ANSIBLE_VARIABLES//\${PRIVATE_REGISTRY_PASSWORD}/${PRIVATE_REGISTRY_PASSWORD}}"
fi

# Write the processed ANSIBLE_VARIABLES to the file, but remove document separators
# to ensure we have a single YAML document
printf '%s' "${PROCESSED_ANSIBLE_VARIABLES}" | tr -d '\r' | sed 's/^---//' >> "${OUTPUT_FILE}"

# Replace placeholders in the template section with actual environment variable values
if [[ -n "${CLUSTER_NAME}" ]]; then
    sed -i "s|\${CLUSTER_NAME:-rancher-test}|${CLUSTER_NAME}|g" "${OUTPUT_FILE}"
fi

if [[ -n "${NAMESPACE}" ]]; then
    sed -i "s|\${NAMESPACE:-default}|${NAMESPACE}|g" "${OUTPUT_FILE}"
fi

if [[ -n "${RKE2_VERSION}" ]]; then
    sed -i "s|\"\\${RKE2_VERSION}\"|\"${RKE2_VERSION}\"|g" "${OUTPUT_FILE}"
fi

if [[ -n "${RANCHER_VERSION}" ]]; then
    sed -i "s|\"\\${RANCHER_VERSION}\"|\"${RANCHER_VERSION}\"|g" "${OUTPUT_FILE}"
fi

if [[ -n "${RANCHER_HOSTNAME}" ]]; then
    sed -i "s|\"\\${RANCHER_HOSTNAME}\"|\"${RANCHER_HOSTNAME}\"|g" "${OUTPUT_FILE}"
fi

if [[ -n "${PRIVATE_REGISTRY_URL}" ]]; then
    sed -i "s|\"\\${PRIVATE_REGISTRY_URL}\"|\"${PRIVATE_REGISTRY_URL}\"|g" "${OUTPUT_FILE}"
fi

if [[ -n "${PRIVATE_REGISTRY_USERNAME}" ]]; then
    sed -i "s|\"\\${PRIVATE_REGISTRY_USERNAME}\"|\"${PRIVATE_REGISTRY_USERNAME}\"|g" "${OUTPUT_FILE}"
fi

if [[ -n "${PRIVATE_REGISTRY_PASSWORD}" ]]; then
    sed -i "s|\"\\${PRIVATE_REGISTRY_PASSWORD}\"|\"${PRIVATE_REGISTRY_PASSWORD}\"|g" "${OUTPUT_FILE}"
fi

if [[ -n "${ENABLE_PRIVATE_REGISTRY}" ]]; then
    sed -i "s|\${ENABLE_PRIVATE_REGISTRY:-false}|${ENABLE_PRIVATE_REGISTRY}|g" "${OUTPUT_FILE}"
fi

if [[ -n "${SSH_USER}" ]]; then
    sed -i "s|\${SSH_USER:-ubuntu}|${SSH_USER}|g" "${OUTPUT_FILE}"
fi

if [[ -n "${SSH_PORT}" ]]; then
    sed -i "s|\${SSH_PORT:-22}|${SSH_PORT}|g" "${OUTPUT_FILE}"
fi

if [[ -n "${POD_CIDR}" ]]; then
    sed -i "s|\${POD_CIDR:-10.42.0.0\/16}|${POD_CIDR}|g" "${OUTPUT_FILE}"
fi

if [[ -n "${SERVICE_CIDR}" ]]; then
    sed -i "s|\${SERVICE_CIDR:-10.43.0.0\/16}|${SERVICE_CIDR}|g" "${OUTPUT_FILE}"
fi

# Validate YAML syntax
echo "=== Validating generated YAML ==="
if command -v python3 &> /dev/null; then
    if python3 -c "import yaml, sys; yaml.safe_load(open('${OUTPUT_FILE}'))" 2>&1; then
        echo "✓ Generated YAML is valid"
    else
        echo "✗ Generated YAML has syntax errors"
        exit 1
    fi
elif command -v yamllint &> /dev/null; then
    if yamllint "${OUTPUT_FILE}"; then
        echo "✓ Generated YAML is valid"
    else
        echo "✗ Generated YAML has validation errors"
        exit 1
    fi
else
    echo "⚠ No YAML validation tool available, proceeding without validation"
fi

# Display file information
echo "=== Generated group_vars file ==="
echo "File: ${OUTPUT_FILE}"
echo "Size: $(wc -c < "${OUTPUT_FILE}") bytes"
echo "Lines: $(wc -l < "${OUTPUT_FILE}")"

# Display content (truncated if too large)
TOTAL_LINES=$(wc -l < "${OUTPUT_FILE}")
if [[ ${TOTAL_LINES} -le 50 ]]; then
    echo "--- Full content ---"
    cat "${OUTPUT_FILE}"
else
    echo "--- First 25 lines ---"
    head -25 "${OUTPUT_FILE}"
    echo ""
    echo "... (lines 26 to $((TOTAL_LINES - 10)) omitted) ..."
    echo ""
    echo "--- Last 10 lines ---"
    tail -10 "${OUTPUT_FILE}"
fi

echo "=== group_vars/all.yml generation completed ==="

# Also copy to standard location for backward compatibility
mkdir -p /root/ansible/rke2/airgap/group_vars
cp "${OUTPUT_FILE}" /root/ansible/rke2/airgap/group_vars/all.yml

echo "✓ group_vars/all.yml copied to standard locations"