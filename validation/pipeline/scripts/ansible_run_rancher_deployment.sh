#!/bin/bash
set -e

# Script to run Rancher deployment playbook from qa-infra-automation repository
# This script is executed within the Docker container

echo "=== Starting Rancher Deployment ==="
echo "RKE2 Version: ${RKE2_VERSION:-'NOT SET'}"
echo "Rancher Version: ${RANCHER_VERSION:-'NOT SET'}"
echo "Private Registry URL: ${PRIVATE_REGISTRY_URL:-'NOT SET'}"
echo "Private Registry Username: ${PRIVATE_REGISTRY_USERNAME:-'NOT SET'}"
echo "QA Infra Work Path: ${QA_INFRA_WORK_PATH:-'NOT SET'}"

# Validate required environment variables
if [[ -z "${QA_INFRA_WORK_PATH}" ]]; then
    echo "ERROR: QA_INFRA_WORK_PATH environment variable is not set"
    exit 1
fi

if [[ -z "${RKE2_VERSION}" ]]; then
    echo "ERROR: RKE2_VERSION environment variable is not set"
    exit 1
fi

if [[ -z "${RANCHER_VERSION}" ]]; then
    echo "ERROR: RANCHER_VERSION environment variable is not set"
    exit 1
fi

# Change to the qa-infra-automation directory
cd "${QA_INFRA_WORK_PATH}"

# Ensure inventory directory exists for mounted inventory file
mkdir -p inventory

# Determine inventory path flexibly
AIRGAP_DIR="ansible/rke2/airgap"
INVENTORY_PATH=""
GROUP_VARS_DIR=""

# First, let's see what's actually in the ansible directory structure
echo "=== DEBUG: Exploring ansible directory structure ==="
echo "Contents of ansible/:"
ls -la ansible/ || echo "ansible/ not found"
echo ""
echo "Contents of ansible/rke2/:"
ls -la ansible/rke2/ || echo "ansible/rke2/ not found"
echo ""
if [[ -d "${AIRGAP_DIR}" ]]; then
  echo "Contents of ${AIRGAP_DIR}/:"
  ls -la "${AIRGAP_DIR}/"
fi
echo ""
echo "Contents of inventory/ (if exists):"
ls -la inventory/ || echo "inventory/ not found"
echo "=== END DEBUG ==="

# Check for inventory in multiple locations
if [[ -f "inventory/inventory.yml" ]]; then
  INVENTORY_PATH="inventory/inventory.yml"
  GROUP_VARS_DIR="inventory/group_vars"
  echo "Found inventory at: ${INVENTORY_PATH}"
elif [[ -f "${AIRGAP_DIR}/inventory.yml" ]]; then
  INVENTORY_PATH="${AIRGAP_DIR}/inventory.yml"
  GROUP_VARS_DIR="${AIRGAP_DIR}/group_vars"
  echo "Found inventory at: ${INVENTORY_PATH}"
else
  # Try common inventory file names under inventory/
  for f in inventory/hosts.yml inventory/hosts.yaml inventory/hosts.ini; do
    if [[ -f "$f" ]]; then
      INVENTORY_PATH="$f"
      GROUP_VARS_DIR="inventory/group_vars"
      echo "Found inventory at: ${INVENTORY_PATH}"
      break
    fi
  done
fi

if [[ -z "${INVENTORY_PATH}" ]]; then
  echo "ERROR: Could not locate an Ansible inventory file. Tried:"
  echo " - inventory/inventory.yml (mounted from Jenkins workspace)"
  echo " - ${AIRGAP_DIR}/inventory.yml"
  echo " - inventory/hosts.yml(yaml|ini)"
  echo "Repository root contents:"
  ls -la
  exit 1
fi

# Ensure group_vars directory exists
if [[ -z "${GROUP_VARS_DIR}" || ! -d "${GROUP_VARS_DIR}" ]]; then
  echo "WARNING: group_vars directory not found at ${GROUP_VARS_DIR}"
  echo "Creating group_vars directory structure..."
  mkdir -p "${GROUP_VARS_DIR}"
  echo "Created: ${GROUP_VARS_DIR}"
fi

# Check if group_vars was already generated by ansible_generate_group_vars.sh
if [[ -f "/root/group_vars/all.yml" ]]; then
  echo "Found pre-generated group_vars at /root/group_vars/all.yml"
  echo "Copying to ${GROUP_VARS_DIR}/all.yml"
  cp /root/group_vars/all.yml "${GROUP_VARS_DIR}/all.yml"
  echo "Group_vars copied successfully"
elif [[ -n "${ANSIBLE_VARIABLES}" ]]; then
  echo "Using ANSIBLE_VARIABLES parameter to create group_vars/all.yml"
  # Write ANSIBLE_VARIABLES content to group_vars/all.yml
  printf '%s' "${ANSIBLE_VARIABLES}" | tr -d '\r' > "${GROUP_VARS_DIR}/all.yml"
  echo "Group_vars created from ANSIBLE_VARIABLES"
else
  echo "WARNING: No ANSIBLE_VARIABLES provided and no pre-generated group_vars found"
  echo "Creating minimal group_vars/all.yml..."
  cat > "${GROUP_VARS_DIR}/all.yml" << 'EOF'
---
# Ansible group variables for Rancher deployment
# This file is auto-generated by the deployment script
EOF
  echo "Created minimal ${GROUP_VARS_DIR}/all.yml"
fi

echo "Using group_vars/all.yml for Rancher deployment"

# Add private registry configuration if provided
if [[ -n "${PRIVATE_REGISTRY_URL}" ]]; then
    echo "Configuring private registry settings..."

    # Ensure file ends with newline before appending
    [[ -n $(tail -c1 "${GROUP_VARS_DIR}/all.yml") ]] && echo "" >> "${GROUP_VARS_DIR}/all.yml"

    # Update private registry URL
    if grep -q "^private_registry_url:" "${GROUP_VARS_DIR}/all.yml"; then
        sed -i "s|^private_registry_url:.*|private_registry_url: \"${PRIVATE_REGISTRY_URL}\"|" "${GROUP_VARS_DIR}/all.yml"
    else
        echo "private_registry_url: \"${PRIVATE_REGISTRY_URL}\"" >> "${GROUP_VARS_DIR}/all.yml"
    fi

    # Update private registry username
    if grep -q "^private_registry_username:" "${GROUP_VARS_DIR}/all.yml"; then
        sed -i "s/^private_registry_username:.*/private_registry_username: \"${PRIVATE_REGISTRY_USERNAME}\"/" "${GROUP_VARS_DIR}/all.yml"
    else
        echo "private_registry_username: \"${PRIVATE_REGISTRY_USERNAME}\"" >> "${GROUP_VARS_DIR}/all.yml"
    fi

    # Update private registry password
    if grep -q "^private_registry_password:" "${GROUP_VARS_DIR}/all.yml"; then
        sed -i "s/^private_registry_password:.*/private_registry_password: \"${PRIVATE_REGISTRY_PASSWORD}\"/" "${GROUP_VARS_DIR}/all.yml"
    else
        echo "private_registry_password: \"${PRIVATE_REGISTRY_PASSWORD}\"" >> "${GROUP_VARS_DIR}/all.yml"
    fi

    # Enable private registry
    if grep -q "^enable_private_registry:" "${GROUP_VARS_DIR}/all.yml"; then
        sed -i "s/^enable_private_registry:.*/enable_private_registry: true/" "${GROUP_VARS_DIR}/all.yml"
    else
        echo "enable_private_registry: true" >> "${GROUP_VARS_DIR}/all.yml"
    fi
fi

# Display the updated configuration
echo "=== Updated group_vars/all.yml ==="
cat "${GROUP_VARS_DIR}/all.yml"
echo "================================="
# Check for Rancher deployment playbook in multiple locations
RANCHER_PLAYBOOK=""

# Try common locations for Rancher playbooks
PLAYBOOK_LOCATIONS=(
  "ansible/rke2/airgap/playbooks/deploy/rancher-helm-deploy-playbook.yml"
  "ansible/rancher/playbooks/deploy-rancher.yml"
  "ansible/rancher/playbooks/rancher-deployment.yml"
  "ansible/rancher/deploy-rancher.yml"
  "ansible/rke2/airgap/playbooks/deploy-rancher.yml"
  "ansible/rke2/airgap/playbooks/rancher-deployment.yml"
  "ansible/rke2/airgap/playbooks/rancher-helm-deployment.yml"
  "playbooks/deploy/rancher-helm-deployment.yml"
  "playbooks/rancher-deployment.yml"
)

echo "=== Searching for Rancher deployment playbook ==="
for playbook in "${PLAYBOOK_LOCATIONS[@]}"; do
  echo "Checking: ${playbook}"
  if [[ -f "${playbook}" ]]; then
    RANCHER_PLAYBOOK="${playbook}"
    echo "Found Rancher playbook at: ${RANCHER_PLAYBOOK}"
    break
  fi
done

if [[ -z "${RANCHER_PLAYBOOK}" ]]; then
    echo "ERROR: Rancher deployment playbook not found in any expected location"
    echo "Tried the following locations:"
    for playbook in "${PLAYBOOK_LOCATIONS[@]}"; do
      echo "  - ${playbook}"
    done
    echo ""
    echo "Available directories structure:"
    echo "Contents of ansible/:"
    ls -la ansible/ 2>/dev/null || echo "ansible/ directory not found"
    echo ""
    echo "Contents of ansible/rancher/:"
    ls -la ansible/rancher/ 2>/dev/null || echo "ansible/rancher/ directory not found"
    echo ""
    echo "Contents of ansible/rancher/playbooks/:"
    ls -la ansible/rancher/playbooks/ 2>/dev/null || echo "ansible/rancher/playbooks/ directory not found"
    echo ""
    echo "Contents of ansible/rke2/airgap/playbooks/:"
    ls -la ansible/rke2/airgap/playbooks/ 2>/dev/null || echo "ansible/rke2/airgap/playbooks/ directory not found"
    exit 1
fi

# Display playbook content for debugging
echo "=== Rancher Playbook Content ==="
cat "${RANCHER_PLAYBOOK}"
echo "================================="

# Wait for cert-manager webhook to be ready before deploying Rancher
echo "=== Waiting for cert-manager webhook to be ready ==="
# This prevents the "no endpoints available for service cert-manager-webhook" error

# Set KUBECONFIG if not already set (should be at /root/.kube/config from kubectl setup)
export KUBECONFIG=${KUBECONFIG:-/root/.kube/config}

if [[ ! -f "${KUBECONFIG}" ]]; then
    echo "WARNING: KUBECONFIG not found at ${KUBECONFIG}"
    echo "Attempting to locate kubeconfig..."
    if [[ -f "/home/ubuntu/.kube/config" ]]; then
        export KUBECONFIG="/home/ubuntu/.kube/config"
        echo "Using kubeconfig from /home/ubuntu/.kube/config"
    elif [[ -f "/root/kubeconfig.yaml" ]]; then
        export KUBECONFIG="/root/kubeconfig.yaml"
        echo "Using kubeconfig from /root/kubeconfig.yaml"
    else
        echo "ERROR: Cannot find kubeconfig file"
        exit 1
    fi
fi

# Wait up to 5 minutes for cert-manager webhook to have endpoints
WAIT_TIMEOUT=300  # 5 minutes
WAIT_INTERVAL=10  # Check every 10 seconds
ELAPSED=0

echo "Checking for cert-manager webhook endpoints..."
while [[ ${ELAPSED} -lt ${WAIT_TIMEOUT} ]]; do
    # Check if cert-manager-webhook service has endpoints
    if kubectl get endpoints cert-manager-webhook -n cert-manager &>/dev/null; then
        ENDPOINT_COUNT=$(kubectl get endpoints cert-manager-webhook -n cert-manager -o jsonpath='{.subsets[*].addresses[*].ip}' 2>/dev/null | wc -w)

        if [[ ${ENDPOINT_COUNT} -gt 0 ]]; then
            echo "✓ cert-manager webhook has ${ENDPOINT_COUNT} endpoint(s) available"

            # Additional check: verify webhook pods are running
            WEBHOOK_PODS_READY=$(kubectl get pods -n cert-manager -l app.kubernetes.io/name=webhook --field-selector=status.phase=Running 2>/dev/null | grep -c "Running" || echo "0")
            if [[ ${WEBHOOK_PODS_READY} -gt 0 ]]; then
                echo "✓ cert-manager webhook pod(s) are running"
                break
            else
                echo "Waiting for cert-manager webhook pods to be Running... (${ELAPSED}s/${WAIT_TIMEOUT}s)"
            fi
        else
            echo "Waiting for cert-manager webhook endpoints... (${ELAPSED}s/${WAIT_TIMEOUT}s)"
        fi
    else
        echo "Waiting for cert-manager webhook service... (${ELAPSED}s/${WAIT_TIMEOUT}s)"
    fi

    sleep ${WAIT_INTERVAL}
    ELAPSED=$((ELAPSED + WAIT_INTERVAL))
done

if [[ ${ELAPSED} -ge ${WAIT_TIMEOUT} ]]; then
    echo "WARNING: Timed out waiting for cert-manager webhook to be ready"
    echo "Checking cert-manager status for debugging..."
    kubectl get pods -n cert-manager || echo "Failed to get cert-manager pods"
    kubectl get endpoints -n cert-manager || echo "Failed to get cert-manager endpoints"
    echo "Proceeding with Rancher deployment anyway..."
else
    echo "✓ cert-manager webhook is ready for Rancher installation"
fi

# Build extra variables to pass to ansible-playbook
EXTRA_VARS=""

if [[ -n "${HOSTNAME_PREFIX}" ]]; then
    EXTRA_VARS="${EXTRA_VARS} -e hostname_prefix=${HOSTNAME_PREFIX}"
    # Also pass as rancher_hostname with .qa.rancher.space suffix for Rancher Helm chart
    EXTRA_VARS="${EXTRA_VARS} -e rancher_hostname=${HOSTNAME_PREFIX}.qa.rancher.space"
    echo "Passing HOSTNAME_PREFIX as extra variable: ${HOSTNAME_PREFIX}"
    echo "Passing rancher_hostname as extra variable: ${HOSTNAME_PREFIX}.qa.rancher.space"
fi

if [[ -n "${RANCHER_VERSION}" ]]; then
    EXTRA_VARS="${EXTRA_VARS} -e rancher_version=${RANCHER_VERSION}"
    echo "Passing RANCHER_VERSION as extra variable: ${RANCHER_VERSION}"
fi

if [[ -n "${RKE2_VERSION}" ]]; then
    EXTRA_VARS="${EXTRA_VARS} -e rke2_version=${RKE2_VERSION}"
    echo "Passing RKE2_VERSION as extra variable: ${RKE2_VERSION}"
fi

if [[ -n "${PRIVATE_REGISTRY_URL}" ]]; then
    EXTRA_VARS="${EXTRA_VARS} -e private_registry_url=${PRIVATE_REGISTRY_URL}"
    echo "Passing PRIVATE_REGISTRY_URL as extra variable: ${PRIVATE_REGISTRY_URL}"
fi

echo "Extra variables for ansible-playbook: ${EXTRA_VARS}"

# Determine the working directory for ansible-playbook
# The playbook should be run from ansible/rke2/airgap/ where ansible.cfg is located
ANSIBLE_WORKDIR=""
if [[ "${RANCHER_PLAYBOOK}" == ansible/rke2/airgap/* ]]; then
    ANSIBLE_WORKDIR="ansible/rke2/airgap"
    # Convert absolute paths to relative paths from the airgap directory
    RELATIVE_PLAYBOOK="${RANCHER_PLAYBOOK#ansible/rke2/airgap/}"
    
    # Convert inventory path to be relative from airgap directory
    if [[ "${INVENTORY_PATH}" == ansible/rke2/airgap/* ]]; then
        RELATIVE_INVENTORY="${INVENTORY_PATH#ansible/rke2/airgap/}"
    elif [[ "${INVENTORY_PATH}" == inventory/* ]]; then
        # inventory/ is at repo root, so we need to go up 3 levels from airgap
        RELATIVE_INVENTORY="../../../${INVENTORY_PATH}"
    else
        RELATIVE_INVENTORY="${INVENTORY_PATH}"
    fi
    
    echo "=== Running Rancher Deployment Playbook from ${ANSIBLE_WORKDIR} ==="
    echo "Working directory: ${ANSIBLE_WORKDIR}"
    echo "Playbook (relative): ${RELATIVE_PLAYBOOK}"
    echo "Inventory (relative): ${RELATIVE_INVENTORY}"

    cd "${ANSIBLE_WORKDIR}"
    ansible-playbook -i "${RELATIVE_INVENTORY}" "${RELATIVE_PLAYBOOK}" -v ${EXTRA_VARS}
else
    # Run from repository root for other playbook locations
    echo "=== Running Rancher Deployment Playbook from repository root ==="
    ansible-playbook -i "${INVENTORY_PATH}" "${RANCHER_PLAYBOOK}" -v ${EXTRA_VARS}
fi

# Capture the exit code
ANSIBLE_EXIT_CODE=$?

echo "=== Rancher Deployment Completed ==="
echo "Ansible exit code: ${ANSIBLE_EXIT_CODE}"

# Save deployment logs
echo "Saving Rancher deployment logs..."
mkdir -p /root
echo "Rancher deployment completed with exit code: ${ANSIBLE_EXIT_CODE}" > /root/rancher-deployment-status.txt

# Exit with the same code as ansible-playbook
exit ${ANSIBLE_EXIT_CODE}
