#!/bin/bash
set -e

# Script to generate group_vars/all.yml from ANSIBLE_VARIABLES
# This script creates a standardized group_vars file that can be used by all Ansible playbooks

# Utility helpers for safe placeholder replacement
escape_sed_replacement() {
    local value="$1"
    value="${value//$'\r'/}"
    value="${value//\\/\\\\}"
    value="${value//\//\\/}"
    value="${value//&/\\&}"
    value="${value//|/\\|}"
    value="${value//\"/\\\"}"
    printf '%s' "$value"
}

yaml_quote() {
    local value="$1"
    value="${value//$'\r'/}"
    value="${value//\\/\\\\}"
    value="${value//\"/\\\"}"
    value="${value//$'\n'/\\n}"
    printf '"%s"' "$value"
}

replace_placeholder() {
    local placeholder="$1"
    local replacement
    replacement="$(escape_sed_replacement "$2")"
    sed -i "s|${placeholder}|${replacement}|g" "${OUTPUT_FILE}"
}

echo "=== Generating Ansible group_vars/all.yml ==="

# Validate required inputs
if [[ -z "${ANSIBLE_VARIABLES}" ]]; then
    echo "ERROR: ANSIBLE_VARIABLES environment variable is not set"
    exit 1
fi

# Create output directory
OUTPUT_DIR="${1:-/root/group_vars}"
mkdir -p "${OUTPUT_DIR}"

OUTPUT_FILE="${OUTPUT_DIR}/all.yml"

# Compute defaulted values used in the template
CLUSTER_NAME_VALUE="${CLUSTER_NAME:-rancher-test}"
NAMESPACE_VALUE="${NAMESPACE:-default}"
RKE2_VERSION_VALUE="${RKE2_VERSION:-}"
RANCHER_VERSION_VALUE="${RANCHER_VERSION:-}"
RANCHER_HOSTNAME_VALUE="${RANCHER_HOSTNAME:-}"
PRIVATE_REGISTRY_URL_VALUE="${PRIVATE_REGISTRY_URL:-}"
PRIVATE_REGISTRY_USERNAME_VALUE="${PRIVATE_REGISTRY_USERNAME:-}"
PRIVATE_REGISTRY_PASSWORD_VALUE="${PRIVATE_REGISTRY_PASSWORD:-}"
ENABLE_PRIVATE_REGISTRY_VALUE="${ENABLE_PRIVATE_REGISTRY:-false}"
ENABLE_PRIVATE_REGISTRY_VALUE="${ENABLE_PRIVATE_REGISTRY_VALUE,,}"
if [[ "${ENABLE_PRIVATE_REGISTRY_VALUE}" != "true" && "${ENABLE_PRIVATE_REGISTRY_VALUE}" != "false" ]]; then
    ENABLE_PRIVATE_REGISTRY_VALUE="false"
fi
SSH_USER_VALUE="${SSH_USER:-ubuntu}"
SSH_PORT_VALUE="${SSH_PORT:-22}"
POD_CIDR_VALUE="${POD_CIDR:-10.42.0.0/16}"
SERVICE_CIDR_VALUE="${SERVICE_CIDR:-10.43.0.0/16}"

# Create a template with placeholders for common variables
cat > "${OUTPUT_FILE}" <<'EOF'
---
# Ansible group variables for Rancher/RKE2 deployment
# This file is auto-generated by ansible_generate_group_vars.sh

# Basic cluster configuration
cluster_name: __CLUSTER_NAME__
namespace: __NAMESPACE__

# RKE2 Configuration
rke2_version: __RKE2_VERSION__

# Rancher Configuration
rancher_version: __RANCHER_VERSION__
rancher_hostname: __RANCHER_HOSTNAME__

# Private Registry Configuration (if enabled)
private_registry_url: __PRIVATE_REGISTRY_URL__
private_registry_username: __PRIVATE_REGISTRY_USERNAME__
private_registry_password: __PRIVATE_REGISTRY_PASSWORD__
enable_private_registry: __ENABLE_PRIVATE_REGISTRY__

# SSH Configuration
ssh_user: __SSH_USER__
ssh_port: __SSH_PORT__

# Network Configuration
pod_cidr: __POD_CIDR__
service_cidr: __SERVICE_CIDR__

# Additional configuration
# Add any additional variables from ANSIBLE_VARIABLES below
EOF

# Replace placeholders with safely quoted values
replace_placeholder "__CLUSTER_NAME__" "$(yaml_quote "${CLUSTER_NAME_VALUE}")"
replace_placeholder "__NAMESPACE__" "$(yaml_quote "${NAMESPACE_VALUE}")"
replace_placeholder "__RKE2_VERSION__" "$(yaml_quote "${RKE2_VERSION_VALUE}")"
replace_placeholder "__RANCHER_VERSION__" "$(yaml_quote "${RANCHER_VERSION_VALUE}")"
replace_placeholder "__RANCHER_HOSTNAME__" "$(yaml_quote "${RANCHER_HOSTNAME_VALUE}")"
replace_placeholder "__PRIVATE_REGISTRY_URL__" "$(yaml_quote "${PRIVATE_REGISTRY_URL_VALUE}")"
replace_placeholder "__PRIVATE_REGISTRY_USERNAME__" "$(yaml_quote "${PRIVATE_REGISTRY_USERNAME_VALUE}")"
replace_placeholder "__PRIVATE_REGISTRY_PASSWORD__" "$(yaml_quote "${PRIVATE_REGISTRY_PASSWORD_VALUE}")"
replace_placeholder "__ENABLE_PRIVATE_REGISTRY__" "${ENABLE_PRIVATE_REGISTRY_VALUE}"
replace_placeholder "__SSH_USER__" "$(yaml_quote "${SSH_USER_VALUE}")"
replace_placeholder "__SSH_PORT__" "${SSH_PORT_VALUE}"
replace_placeholder "__POD_CIDR__" "$(yaml_quote "${POD_CIDR_VALUE}")"
replace_placeholder "__SERVICE_CIDR__" "$(yaml_quote "${SERVICE_CIDR_VALUE}")"

# Add the ANSIBLE_VARIABLES content at the end of the file
{
    echo ""
    echo "# Variables from ANSIBLE_VARIABLES parameter"
} >> "${OUTPUT_FILE}"

# Process ANSIBLE_VARIABLES to replace placeholders with actual environment variable values
PROCESSED_ANSIBLE_VARIABLES="${ANSIBLE_VARIABLES}"

if [[ -n "${RKE2_VERSION}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="${PROCESSED_ANSIBLE_VARIABLES//\${RKE2_VERSION}/${RKE2_VERSION}}"
fi

if [[ -n "${RANCHER_VERSION}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="${PROCESSED_ANSIBLE_VARIABLES//\${RANCHER_VERSION}/${RANCHER_VERSION}}"
fi

if [[ -n "${HOSTNAME_PREFIX}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="${PROCESSED_ANSIBLE_VARIABLES//\${HOSTNAME_PREFIX}/${HOSTNAME_PREFIX}}"
fi

if [[ -n "${PRIVATE_REGISTRY_URL}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="${PROCESSED_ANSIBLE_VARIABLES//\${PRIVATE_REGISTRY_URL}/${PRIVATE_REGISTRY_URL}}"
fi

if [[ -n "${PRIVATE_REGISTRY_USERNAME}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="${PROCESSED_ANSIBLE_VARIABLES//\${PRIVATE_REGISTRY_USERNAME}/${PRIVATE_REGISTRY_USERNAME}}"
fi

if [[ -n "${PRIVATE_REGISTRY_PASSWORD}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="${PROCESSED_ANSIBLE_VARIABLES//\${PRIVATE_REGISTRY_PASSWORD}/${PRIVATE_REGISTRY_PASSWORD}}"
fi

# Write the processed ANSIBLE_VARIABLES to the file, removing leading document separators
printf '%s\n' "${PROCESSED_ANSIBLE_VARIABLES}" | tr -d '\r' | sed 's/^---//' >> "${OUTPUT_FILE}"

# Validate YAML syntax
echo "=== Validating generated YAML ==="
if command -v python3 &>/dev/null; then
    if python3 -c "import yaml, sys; yaml.safe_load(open('${OUTPUT_FILE}', encoding='utf-8'))" 2>&1; then
        echo "✓ Generated YAML is valid"
    else
        echo "✗ Generated YAML has syntax errors"
        exit 1
    fi
elif command -v yamllint &>/dev/null; then
    if yamllint "${OUTPUT_FILE}"; then
        echo "✓ Generated YAML is valid"
    else
        echo "✗ Generated YAML has validation errors"
        exit 1
    fi
else
    echo "⚠ No YAML validation tool available, proceeding without validation"
fi

# Display file information
echo "=== Generated group_vars file ==="
echo "File: ${OUTPUT_FILE}"
echo "Size: $(wc -c < "${OUTPUT_FILE}") bytes"
echo "Lines: $(wc -l < "${OUTPUT_FILE}")"

TOTAL_LINES=$(wc -l < "${OUTPUT_FILE}")
if [[ ${TOTAL_LINES} -le 50 ]]; then
    echo "--- Full content ---"
    cat "${OUTPUT_FILE}"
else
    echo "--- First 25 lines ---"
    head -25 "${OUTPUT_FILE}"
    echo ""
    echo "... (lines 26 to $((TOTAL_LINES - 10)) omitted) ..."
    echo ""
    echo "--- Last 10 lines ---"
    tail -10 "${OUTPUT_FILE}"
fi

echo "=== group_vars/all.yml generation completed ==="

# Also copy to standard location for backward compatibility
mkdir -p /root/ansible/rke2/airgap/group_vars
cp "${OUTPUT_FILE}" /root/ansible/rke2/airgap/group_vars/all.yml

echo "✓ group_vars/all.yml copied to standard locations"