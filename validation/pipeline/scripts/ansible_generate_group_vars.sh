#!/bin/bash
set -e

# Script to generate group_vars/all.yml from ANSIBLE_VARIABLES
# This script creates a standardized group_vars file that can be used by all Ansible playbooks

# Utility helpers for safe placeholder replacement
escape_sed_replacement() {
    local value="$1"
    value="${value//$'\r'/}"
    value="${value//\\/\\\\}"
    value="${value//\//\\/}"
    value="${value//&/\\&}"
    value="${value//|/\\|}"
    value="${value//\"/\\\"}"
    printf '%s' "$value"
}

yaml_quote() {
    local value="$1"
    value="${value//$'\r'/}"
    value="${value//\\/\\\\}"
    value="${value//\"/\\\"}"
    value="${value//$'\n'/\\n}"
    printf '"%s"' "$value"
}

replace_placeholder() {
    local placeholder="$1"
    local replacement
    replacement="$(escape_sed_replacement "$2")"
    sed -i "s|${placeholder}|${replacement}|g" "${OUTPUT_FILE}"
}

echo "=== Generating Ansible group_vars/all.yml ==="

# Debug: Print environment variables to verify they're available
echo "=== DEBUG: Environment Variables ==="
echo "RKE2_VERSION: '${RKE2_VERSION:-NOT_SET}'"
echo "RANCHER_VERSION: '${RANCHER_VERSION:-NOT_SET}'"
echo "HOSTNAME_PREFIX: '${HOSTNAME_PREFIX:-NOT_SET}'"
echo "RANCHER_HOSTNAME: '${RANCHER_HOSTNAME:-NOT_SET}'"
echo "PRIVATE_REGISTRY_URL: '${PRIVATE_REGISTRY_URL:-NOT_SET}'"
echo "PRIVATE_REGISTRY_USERNAME: '${PRIVATE_REGISTRY_USERNAME:-NOT_SET}'"
echo "PRIVATE_REGISTRY_PASSWORD: '${PRIVATE_REGISTRY_PASSWORD:-NOT_SET}'"
echo "SSH_USER: '${SSH_USER:-NOT_SET}'"
echo "SSH_PORT: '${SSH_PORT:-NOT_SET}'"
echo "CLUSTER_NAME: '${CLUSTER_NAME:-NOT_SET}'"
echo "NAMESPACE: '${NAMESPACE:-NOT_SET}'"
echo "=== END DEBUG ==="

# Validate required inputs
if [[ -z "${ANSIBLE_VARIABLES}" && -n "${ANSIBLE_VARIABLES_FILE}" ]]; then
    if [[ -f "${ANSIBLE_VARIABLES_FILE}" ]]; then
        ANSIBLE_VARIABLES="$(cat "${ANSIBLE_VARIABLES_FILE}")"
    else
        echo "ERROR: ANSIBLE_VARIABLES_FILE '${ANSIBLE_VARIABLES_FILE}' does not exist"
        exit 1
    fi
fi

if [[ -z "${ANSIBLE_VARIABLES}" ]]; then
    echo "ERROR: ANSIBLE_VARIABLES environment variable is not set"
    exit 1
fi

# Create output directory
OUTPUT_DIR="${1:-/root/group_vars}"
mkdir -p "${OUTPUT_DIR}"

OUTPUT_FILE="${OUTPUT_DIR}/all.yml"

# Compute defaulted values used in the template
CLUSTER_NAME_VALUE="${CLUSTER_NAME:-rancher-test}"
NAMESPACE_VALUE="${NAMESPACE:-default}"
RKE2_VERSION_VALUE="${RKE2_VERSION:-}"
RANCHER_VERSION_VALUE="${RANCHER_VERSION:-}"
RANCHER_HOSTNAME_VALUE="${RANCHER_HOSTNAME:-}"
PRIVATE_REGISTRY_URL_VALUE="${PRIVATE_REGISTRY_URL:-}"
PRIVATE_REGISTRY_USERNAME_VALUE="${PRIVATE_REGISTRY_USERNAME:-}"
PRIVATE_REGISTRY_PASSWORD_VALUE="${PRIVATE_REGISTRY_PASSWORD:-}"
ENABLE_PRIVATE_REGISTRY_VALUE="${ENABLE_PRIVATE_REGISTRY:-false}"
ENABLE_PRIVATE_REGISTRY_VALUE="${ENABLE_PRIVATE_REGISTRY_VALUE,,}"
if [[ "${ENABLE_PRIVATE_REGISTRY_VALUE}" != "true" && "${ENABLE_PRIVATE_REGISTRY_VALUE}" != "false" ]]; then
    ENABLE_PRIVATE_REGISTRY_VALUE="false"
fi
SSH_USER_VALUE="${SSH_USER:-ubuntu}"
SSH_PORT_VALUE="${SSH_PORT:-22}"
POD_CIDR_VALUE="${POD_CIDR:-10.42.0.0/16}"
SERVICE_CIDR_VALUE="${SERVICE_CIDR:-10.43.0.0/16}"

# Create a simple header for the file
cat > "${OUTPUT_FILE}" <<'EOF'
---
# Ansible group variables for Rancher/RKE2 deployment
# This file is auto-generated by ansible_generate_group_vars.sh
# All variables come from ANSIBLE_VARIABLES parameter

EOF

# Process ANSIBLE_VARIABLES to replace placeholders with actual environment variable values
PROCESSED_ANSIBLE_VARIABLES="${ANSIBLE_VARIABLES}"

# Use manual string replacement to avoid envsubst issues with unset variables
# Only replace ${VAR} patterns, leave {{ VAR }} templating syntax intact
# Use sed for more precise replacement to avoid partial matches
if [[ -n "${RKE2_VERSION}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="$(echo "${PROCESSED_ANSIBLE_VARIABLES}" | sed 's/\${RKE2_VERSION}/'"${RKE2_VERSION}"'/g')"
fi

if [[ -n "${RANCHER_VERSION}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="$(echo "${PROCESSED_ANSIBLE_VARIABLES}" | sed 's/\${RANCHER_VERSION}/'"${RANCHER_VERSION}"'/g')"
fi

if [[ -n "${HOSTNAME_PREFIX}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="$(echo "${PROCESSED_ANSIBLE_VARIABLES}" | sed 's/\${HOSTNAME_PREFIX}/'"${HOSTNAME_PREFIX}"'/g')"
fi

if [[ -n "${RANCHER_HOSTNAME}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="$(echo "${PROCESSED_ANSIBLE_VARIABLES}" | sed 's/\${RANCHER_HOSTNAME}/'"${RANCHER_HOSTNAME}"'/g')"
fi

if [[ -n "${PRIVATE_REGISTRY_URL}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="$(echo "${PROCESSED_ANSIBLE_VARIABLES}" | sed 's/\${PRIVATE_REGISTRY_URL}/'"${PRIVATE_REGISTRY_URL}"'/g')"
fi

if [[ -n "${PRIVATE_REGISTRY_USERNAME}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="$(echo "${PROCESSED_ANSIBLE_VARIABLES}" | sed 's/\${PRIVATE_REGISTRY_USERNAME}/'"${PRIVATE_REGISTRY_USERNAME}"'/g')"
fi

if [[ -n "${PRIVATE_REGISTRY_PASSWORD}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="$(echo "${PROCESSED_ANSIBLE_VARIABLES}" | sed 's/\${PRIVATE_REGISTRY_PASSWORD}/'"${PRIVATE_REGISTRY_PASSWORD}"'/g')"
fi

if [[ -n "${SSH_USER}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="$(echo "${PROCESSED_ANSIBLE_VARIABLES}" | sed 's/\${SSH_USER}/'"${SSH_USER}"'/g')"
fi

if [[ -n "${SSH_PORT}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="$(echo "${PROCESSED_ANSIBLE_VARIABLES}" | sed 's/\${SSH_PORT}/'"${SSH_PORT}"'/g')"
fi

if [[ -n "${CLUSTER_NAME}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="$(echo "${PROCESSED_ANSIBLE_VARIABLES}" | sed 's/\${CLUSTER_NAME}/'"${CLUSTER_NAME}"'/g')"
fi

if [[ -n "${NAMESPACE}" ]]; then
    PROCESSED_ANSIBLE_VARIABLES="$(echo "${PROCESSED_ANSIBLE_VARIABLES}" | sed 's/\${NAMESPACE}/'"${NAMESPACE}"'/g')"
fi

# Clean up any remaining unmatched variable patterns that might cause issues
PROCESSED_ANSIBLE_VARIABLES="$(echo "${PROCESSED_ANSIBLE_VARIABLES}" | sed 's/\$[^{}]*}/}/g')"

# Write the processed ANSIBLE_VARIABLES to the file, removing leading document separators
printf '%s\n' "${PROCESSED_ANSIBLE_VARIABLES}" | tr -d '\r' | sed 's/^---//' >> "${OUTPUT_FILE}"

# Determine whether strict YAML validation should run
SHOULD_VALIDATE_YAML="true"
if [[ "${PROCESSED_ANSIBLE_VARIABLES}" == *"{{"* ]] || [[ "${PROCESSED_ANSIBLE_VARIABLES}" == *"}}"* ]]; then
    echo "⚠ Detected templating tokens ({{ }}) in ANSIBLE_VARIABLES payload; skipping strict YAML validation"
    SHOULD_VALIDATE_YAML="false"
elif [[ "${SKIP_YAML_VALIDATION}" == "true" ]]; then
    echo "⚠ SKIP_YAML_VALIDATION flag set; skipping strict YAML validation"
    SHOULD_VALIDATE_YAML="false"
fi

# Validate YAML syntax when safe to do so
if [[ "${SHOULD_VALIDATE_YAML}" == "true" ]]; then
    echo "=== Validating generated YAML ==="
    if command -v python3 &>/dev/null; then
        if python3 -c "import yaml, sys; yaml.safe_load(open('${OUTPUT_FILE}', encoding='utf-8'))" 2>&1; then
            echo "✓ Generated YAML is valid"
        else
            echo "✗ Generated YAML has syntax errors"
            exit 1
        fi
    elif command -v yamllint &>/dev/null; then
        if yamllint "${OUTPUT_FILE}"; then
            echo "✓ Generated YAML is valid"
        else
            echo "✗ Generated YAML has validation errors"
            exit 1
        fi
    else
        echo "⚠ No YAML validation tool available, proceeding without validation"
    fi
else
    echo "=== Skipping strict YAML validation ==="
fi

# Display file information
echo "=== Generated group_vars file ==="
echo "File: ${OUTPUT_FILE}"
echo "Size: $(wc -c < "${OUTPUT_FILE}") bytes"
echo "Lines: $(wc -l < "${OUTPUT_FILE}")"
echo "--- Full content ---"
cat "${OUTPUT_FILE}"

echo "=== group_vars/all.yml generation completed ==="

# Also copy to standard location for backward compatibility
TARGET_GROUP_VARS_DIR="/root/ansible/rke2/airgap/group_vars"
if mkdir -p "${TARGET_GROUP_VARS_DIR}" 2>/dev/null; then
    cp "${OUTPUT_FILE}" "${TARGET_GROUP_VARS_DIR}/all.yml"
    echo "✓ group_vars/all.yml copied to ${TARGET_GROUP_VARS_DIR}"
else
    echo "⚠ Skipping copy to ${TARGET_GROUP_VARS_DIR} (insufficient permissions)"
fi